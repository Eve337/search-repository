{"version":3,"sources":["components/Card.tsx","components/ResultsRepos.tsx","components/Searchbar.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","SimpleCard","props","classes","Card","className","CardContent","Typography","color","gutterBottom","index","variant","component","Link","href","url","name","creator","description","ResultRepos","repositories","listRepositories","length","map","el","number","html_url","owner","login","id","onScroll","e","handleScroll","Searchbar","firstRenderRef","useRef","useState","search","setSearchInput","setRepositories","pageNumber","setPageNumber","loading","setLoading","document","addEventListener","console","log","Math","ceil","body","offsetHeight","window","scrollY","innerHeight","prev","useEffect","current","requestGetRepositories","scrollTo","a","fetch","then","res","json","data","reps","items","catch","err","alert","autoComplete","TextField","placeholder","value","onChange","target","required","Button","onClick","searchWord","trim","checkSearch","currentTarget","scrollTop","clientHeight","scrollHeight","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"qVAOMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,KAEZC,OAAQ,CACNC,QAAS,eACTC,OAAQ,QACRC,UAAW,cAEbC,MAAO,CACLC,SAAU,IAEZC,IAAK,CACHC,aAAc,MAIH,SAASC,EAAWC,GACjC,IAAMC,EAAUd,IAGhB,OACE,cAACe,EAAA,EAAD,CAAMC,UAAWF,EAAQZ,KAAzB,SACE,eAACe,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYF,UAAWF,EAAQN,MAAOW,MAAM,gBAAgBC,cAAY,EAAxE,SACGP,EAAMQ,QAET,cAACH,EAAA,EAAD,CAAYI,QAAQ,KAAKC,UAAU,KAAnC,SACI,cAACC,EAAA,EAAD,CAAMC,KAAMZ,EAAMa,IAAlB,SACCb,EAAMc,SAGX,cAACT,EAAA,EAAD,CAAYF,UAAWF,EAAQJ,IAAKS,MAAM,gBAA1C,SACGN,EAAMe,UAET,cAACV,EAAA,EAAD,CAAYI,QAAQ,QAAQC,UAAU,IAAtC,SACGV,EAAMgB,mBCvCjB,IAyBeC,EAzBK,SAACjB,GACjB,IAAQkB,EAAiBlB,EAAjBkB,aACFC,EAAmBD,EAAaE,OAAS,GAC9CF,EAAaG,KAAI,SAACC,EAAQd,GAAT,OAEjB,cAACT,EAAD,CACGI,UAAY,OACZW,KAAQQ,EAAGR,KACXN,MAASc,EAAGC,OAEZV,IAAOS,EAAGE,SACVT,QAAWO,EAAGG,MAAMC,MACpBV,YAAeM,EAAGN,aAHXM,EAAGK,OAMd,OACI,qBAAKxB,UAAU,SAASyB,SAAU,SAACC,GAAD,OAAO7B,EAAM8B,aAAaD,IAA5D,SACI,oBAAI1B,UAAU,WAAd,SACKgB,OC8EFY,EA5FG,SAAC/B,GACf,IAAMgC,EAAiBC,kBAAO,GAC9B,EAAiCC,mBAAS,IAA1C,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAAwCF,mBAAwB,IAAhE,mBAAOhB,EAAP,KAAqBmB,EAArB,KACA,EAAoCH,mBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KACA,EAA8BL,oBAAS,GAAvC,mBAAOM,EAAP,KAAgBC,EAAhB,KAGAC,SAASC,iBAAiB,UAAU,SAASd,GACzCe,QAAQC,IAAKC,KAAKC,KAAKL,SAASM,KAAKC,cAAgBC,OAAOC,QAAUD,OAAOE,eAEzEN,KAAKC,KAAKL,SAASM,KAAKC,cAAgBC,OAAOC,QAAUD,OAAOE,cAAgB,IAAMZ,IAEtFC,GAAW,GAEXF,GAAc,SAAAc,GAAI,OAAIA,EAAO,KAC7BT,QAAQC,IAAI,8BAIpBS,qBAAU,WACFtB,EAAeuB,QACfvB,EAAeuB,SAAU,GAGzBC,EAAuBlB,GACvBY,OAAOO,SAAS,EAAGP,OAAOC,QAAU,KACpCP,QAAQC,IAAIL,GACZC,GAAW,MAEjB,CAACH,IAEH,IAoBMkB,EAAsB,uCAAG,WAAOlB,GAAP,SAAAoB,EAAA,0DACxBlB,EADwB,gCAEjBmB,MAAM,gDAAD,OAAiDxB,EAAjD,wCAAuFG,IACjGsB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACNnB,QAAQC,IAAIkB,GACJ1B,GAAgB,SAAA2B,GAAI,4BAAQA,GAAR,YAAiBD,EAAKE,cAC/CC,OAAM,SAACC,GAAD,OAAaC,MAAM,gCAPL,2CAAH,sDAY5B,OACI,sBAAKjE,UAAU,MAAf,UACI,uBAAMkE,aAAa,MAAnB,UACI,cAACC,EAAA,EAAD,CACI3C,GAAG,iBACH4C,YAAY,kBACZC,MAAOrC,EACPsC,SAvCK,SAAC5C,GAClBO,EAAeP,EAAE6C,OAAOF,QAuCZG,UAAQ,IACZ,cAACC,EAAA,EAAD,CACInE,QAAQ,YACRH,MAAM,UACNuE,QAAS,YA9BL,SAACC,GACjB,GAAIA,GAAc3C,EAAO4C,OACrB,OAAO,EA6BQC,CAAY7C,GAIXC,EAAe,mBAHfC,EAAgB,IAChBmB,EAAuBlB,KANnC,2BAcJ,cAAC,EAAD,CAAapB,aAAgBA,EAAcY,aAnD9B,SAACD,GAClBe,QAAQC,IAAI,aACZ,MAAkDhB,EAAEoD,cAA5CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aAAnB,EAAiCC,aAEdF,IAAcC,IACjC5C,GAAc,SAAAc,GAAI,OAAIA,EAAO,KACzBT,QAAQC,IAAI,qBCrCTwC,MATf,WACE,OACE,sBAAKlF,UAAU,MAAf,UACE,wCACA,cAAC,EAAD,QCFNmF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9C,SAAS+C,eAAe,W","file":"static/js/main.1715b8e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Link from '@material-ui/core/Link';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275\r\n  },\r\n  bullet: {\r\n    display: 'inline-block',\r\n    margin: '0 2px',\r\n    transform: 'scale(0.8)',\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nexport default function SimpleCard(props: any) {\r\n  const classes = useStyles();\r\n  \r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent>\r\n        <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n          {props.index}\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h2\">\r\n            <Link href={props.url} >\r\n            {props.name}\r\n            </Link>\r\n        </Typography>\r\n        <Typography className={classes.pos} color=\"textSecondary\">\r\n          {props.creator}\r\n        </Typography>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          {props.description}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}","import React from 'react';\r\nimport './ResultsRepos.css';\r\nimport SimpleCard from './Card';\r\n\r\nconst ResultRepos = (props : any) => {\r\n    const { repositories } = props;\r\n    const listRepositories = repositories.length > 0 && \r\n     repositories.map((el:any, index: number) => \r\n     \r\n     <SimpleCard \r\n        className = \"card\"\r\n        name = {el.name}\r\n        index = {el.number} \r\n        key = {el.id} \r\n        url = {el.html_url} \r\n        creator = {el.owner.login}\r\n        description = {el.description}/>);\r\n        \r\n\r\n    return (\r\n        <div className=\"scroll\" onScroll={(e) => props.handleScroll(e)} >\r\n            <ul className=\"repoList\">\r\n                {listRepositories}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ResultRepos;\r\n\r\n//<li>{ el.html_url }</li>","import React, { useEffect }  from 'react';\r\nimport { useState, useRef } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport ResultRepos from './ResultsRepos';\r\n\r\n\r\n\r\nconst Searchbar = (props : object) => {\r\n    const firstRenderRef = useRef(true);\r\n    const [search, setSearchInput] = useState('');\r\n    const [repositories, setRepositories] = useState<Array<object>>([]);\r\n    const [pageNumber, setPageNumber] = useState(1);\r\n    const [loading, setLoading] = useState(true);\r\n    \r\n    \r\n    document.addEventListener('scroll', function(e) {\r\n        console.log( Math.ceil(document.body.offsetHeight - (window.scrollY + window.innerHeight)));\r\n        if(\r\n            Math.ceil(document.body.offsetHeight - (window.scrollY + window.innerHeight)) < 10 && loading\r\n        ){\r\n            setLoading(false); \r\n           // console.log(loading);\r\n            setPageNumber(prev => prev + 1);\r\n            console.log('finally, only one load');\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (firstRenderRef.current) {\r\n            firstRenderRef.current = false;\r\n          } else {\r\n            \r\n            requestGetRepositories(pageNumber);\r\n            window.scrollTo(0, window.scrollY - 100);\r\n            console.log(loading);\r\n            setLoading(true);\r\n          }\r\n    },[pageNumber]);\r\n\r\n    const handleChange = (e: any) => {\r\n        setSearchInput(e.target.value);\r\n    }\r\n\r\n    const handleScroll = (e: any) => {\r\n        console.log('working 1');\r\n        const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\r\n        \r\n        if (scrollHeight - scrollTop === clientHeight) {\r\n        setPageNumber(prev => prev + 1);\r\n            console.log('working 2');\r\n        }\r\n    }\r\n\r\n    const checkSearch = (searchWord:string) => {\r\n        if (searchWord && search.trim()){\r\n            return true\r\n        }\r\n    }\r\n\r\n    const requestGetRepositories = async (pageNumber: any) => {\r\n        if(loading){\r\n            await fetch(`https://api.github.com/search/repositories?q=${search}&sort=stars&per_page=15&page=${pageNumber}`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n            console.log(data);\r\n                    setRepositories(reps => [...reps, ...data.items]);\r\n            }).catch((err:any) => alert('too much requests, fix it'));\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n        <div className='ass'> \r\n            <form autoComplete=\"off\">\r\n                <TextField \r\n                    id=\"standard-basic\" \r\n                    placeholder=\"Write repo name\" \r\n                    value={search} \r\n                    onChange={handleChange}\r\n                    required/>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    color=\"primary\" \r\n                    onClick={() =>{\r\n                        if(checkSearch(search)){\r\n                            setRepositories([]);\r\n                            requestGetRepositories(pageNumber);\r\n                        } else {\r\n                            setSearchInput('Dont be a fool');\r\n                        }\r\n                    } }>\r\n                    Let's roll\r\n                </Button>\r\n            </form>\r\n            <ResultRepos repositories = {repositories} handleScroll={handleScroll} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import React from 'react';\nimport './App.css';\nimport Searchbar from './components/Searchbar';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Search</h1>\n      <Searchbar />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}